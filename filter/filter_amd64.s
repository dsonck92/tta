//+build !noasm !appengine
// AUTO-GENERATED BY C2GOASM -- DO NOT EDIT

DATA LCDATA1<>+0x000(SB)/8, $0x0000000200000001
DATA LCDATA1<>+0x008(SB)/8, $0x0000000400000002
DATA LCDATA1<>+0x010(SB)/8, $0xfffffffeffffffff
DATA LCDATA1<>+0x018(SB)/8, $0xfffffffcfffffffe
GLOBL LCDATA1<>(SB), 8, $32

TEXT ·__hybrid_filter_dec_sse4(SB), $16-56

	MOVQ in+0(FP), DI
	MOVQ err+8(FP), SI
	MOVQ qm+16(FP), DX
	MOVQ dx+24(FP), CX
	MOVQ dl+32(FP), R8
	MOVQ round+40(FP), R9
	MOVQ shift+48(FP), R10
	ADDQ $8, SP
	MOVQ R10, 0(SP)
	LEAQ LCDATA1<>(SB), BP

	LONG $0x24148b44               // mov    r10d, dword 0[rsp] /* [rbp + 16] */
	LONG $0x6f0f4166; BYTE $0x10   // movdqa    xmm2, oword [r8]
	LONG $0x6f0f4166; WORD $0x1040 // movdqa    xmm0, oword [r8 + 16]
	LONG $0x2a6f0f66               // movdqa    xmm5, oword [rdx]
	LONG $0x626f0f66; BYTE $0x10   // movdqa    xmm4, oword [rdx + 16]
	LONG $0x196f0f66               // movdqa    xmm3, oword [rcx]
	LONG $0x496f0f66; BYTE $0x10   // movdqa    xmm1, oword [rcx + 16]
	WORD $0x068b                   // mov    eax, dword [rsi]
	WORD $0xc085                   // test    eax, eax
	JS   LBB0_1
	JE   LBB0_5
	LONG $0xebfe0f66               // paddd    xmm5, xmm3
	LONG $0xe1fe0f66               // paddd    xmm4, xmm1
	JMP  LBB0_4

LBB0_1:
	LONG $0xebfa0f66 // psubd    xmm5, xmm3
	LONG $0xe1fa0f66 // psubd    xmm4, xmm1

LBB0_4:
	LONG $0x2a7f0f66             // movdqa    oword [rdx], xmm5
	LONG $0x627f0f66; BYTE $0x10 // movdqa    oword [rdx + 16], xmm4

LBB0_5:
	LONG $0x40380f66; BYTE $0xea   // pmulld    xmm5, xmm2
	LONG $0x40380f66; BYTE $0xe0   // pmulld    xmm4, xmm0
	LONG $0xe5fe0f66               // paddd    xmm4, xmm5
	LONG $0xec700f66; BYTE $0xee   // pshufd    xmm5, xmm4, 238
	LONG $0xecfe0f66               // paddd    xmm5, xmm4
	LONG $0xe87e0f66               // movd    eax, xmm5
	LONG $0x163a0f66; WORD $0x01ea // pextrd    edx, xmm5, 1
	WORD $0x0144; BYTE $0xca       // add    edx, r9d
	WORD $0xc201                   // add    edx, eax
	LONG $0x0f3a0f66; WORD $0x04cb // palignr    xmm1, xmm3, 4
	LONG $0xd86f0f66               // movdqa    xmm3, xmm0
	LONG $0x0f3a0f66; WORD $0x04da // palignr    xmm3, xmm2, 4
	LONG $0xe0720f66; BYTE $0x1e   // psrad    xmm0, 30
	LONG $0x45eb0f66; BYTE $0x00   // por    xmm0, oword 0[rbp] /* [rip + LCPI0_0] */
	LONG $0x45db0f66; BYTE $0x10   // pand    xmm0, oword 16[rbp] /* [rip + LCPI0_1] */
	LONG $0x7f0f4166; BYTE $0x18   // movdqa    oword [r8], xmm3
	LONG $0x097f0f66               // movdqa    oword [rcx], xmm1
	LONG $0x417f0f66; BYTE $0x10   // movdqa    oword [rcx + 16], xmm0
	WORD $0x078b                   // mov    eax, dword [rdi]
	WORD $0x0689                   // mov    dword [rsi], eax
	WORD $0x8944; BYTE $0xd1       // mov    ecx, r10d
	WORD $0xfad3                   // sar    edx, cl
	WORD $0x1701                   // add    dword [rdi], edx
	LONG $0x14408b41               // mov    eax, dword [r8 + 20]
	WORD $0xc189                   // mov    ecx, eax
	WORD $0xd9f7                   // neg    ecx
	LONG $0x10488941               // mov    dword [r8 + 16], ecx
	LONG $0x18488b41               // mov    ecx, dword [r8 + 24]
	WORD $0xca89                   // mov    edx, ecx
	WORD $0xdaf7                   // neg    edx
	LONG $0x14508941               // mov    dword [r8 + 20], edx
	WORD $0x178b                   // mov    edx, dword [rdi]
	LONG $0x1c502b41               // sub    edx, dword [r8 + 28]
	LONG $0x18508941               // mov    dword [r8 + 24], edx
	WORD $0x378b                   // mov    esi, dword [rdi]
	LONG $0x1c708941               // mov    dword [r8 + 28], esi
	WORD $0xca29                   // sub    edx, ecx
	LONG $0x14508941               // mov    dword [r8 + 20], edx
	WORD $0xc229                   // sub    edx, eax
	LONG $0x10508941               // mov    dword [r8 + 16], edx
	SUBQ $8, SP
	RET

DATA LCDATA2<>+0x000(SB)/8, $0x0000000200000001
DATA LCDATA2<>+0x008(SB)/8, $0x0000000400000002
DATA LCDATA2<>+0x010(SB)/8, $0xfffffffeffffffff
DATA LCDATA2<>+0x018(SB)/8, $0xfffffffcfffffffe
GLOBL LCDATA2<>(SB), 8, $32

TEXT ·__hybrid_filter_enc_sse4(SB), $16-56

	MOVQ in+0(FP), DI
	MOVQ err+8(FP), SI
	MOVQ qm+16(FP), DX
	MOVQ dx+24(FP), CX
	MOVQ dl+32(FP), R8
	MOVQ round+40(FP), R9
	MOVQ shift+48(FP), R10
	ADDQ $8, SP
	MOVQ R10, 0(SP)
	LEAQ LCDATA2<>(SB), BP

	WORD $0x8949; BYTE $0xca       // mov    r10, rcx
	WORD $0x0c8b; BYTE $0x24       // mov    ecx, dword 0[rsp] /* [rbp + 16] */
	LONG $0x6f0f4166; BYTE $0x10   // movdqa    xmm2, oword [r8]
	LONG $0x6f0f4166; WORD $0x1040 // movdqa    xmm0, oword [r8 + 16]
	LONG $0x2a6f0f66               // movdqa    xmm5, oword [rdx]
	LONG $0x626f0f66; BYTE $0x10   // movdqa    xmm4, oword [rdx + 16]
	LONG $0x6f0f4166; BYTE $0x1a   // movdqa    xmm3, oword [r10]
	LONG $0x6f0f4166; WORD $0x104a // movdqa    xmm1, oword [r10 + 16]
	WORD $0x068b                   // mov    eax, dword [rsi]
	WORD $0xc085                   // test    eax, eax
	JS   LBB1_1
	JE   LBB1_5
	LONG $0xebfe0f66               // paddd    xmm5, xmm3
	LONG $0xe1fe0f66               // paddd    xmm4, xmm1
	JMP  LBB1_4

LBB1_1:
	LONG $0xebfa0f66 // psubd    xmm5, xmm3
	LONG $0xe1fa0f66 // psubd    xmm4, xmm1

LBB1_4:
	LONG $0x2a7f0f66             // movdqa    oword [rdx], xmm5
	LONG $0x627f0f66; BYTE $0x10 // movdqa    oword [rdx + 16], xmm4

LBB1_5:
	LONG $0x40380f66; BYTE $0xea               // pmulld    xmm5, xmm2
	LONG $0x40380f66; BYTE $0xe0               // pmulld    xmm4, xmm0
	LONG $0xe5fe0f66                           // paddd    xmm4, xmm5
	LONG $0xec700f66; BYTE $0xee               // pshufd    xmm5, xmm4, 238
	LONG $0xecfe0f66                           // paddd    xmm5, xmm4
	LONG $0xe87e0f66                           // movd    eax, xmm5
	LONG $0x3a0f4166; WORD $0xeb16; BYTE $0x01 // pextrd    r11d, xmm5, 1
	WORD $0x0145; BYTE $0xcb                   // add    r11d, r9d
	WORD $0x0141; BYTE $0xc3                   // add    r11d, eax
	LONG $0x0f3a0f66; WORD $0x04cb             // palignr    xmm1, xmm3, 4
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0x0f3a0f66; WORD $0x04da             // palignr    xmm3, xmm2, 4
	LONG $0xe0720f66; BYTE $0x1e               // psrad    xmm0, 30
	LONG $0x45eb0f66; BYTE $0x00               // por    xmm0, oword 0[rbp] /* [rip + LCPI1_0] */
	LONG $0x45db0f66; BYTE $0x10               // pand    xmm0, oword 16[rbp] /* [rip + LCPI1_1] */
	LONG $0x7f0f4166; BYTE $0x18               // movdqa    oword [r8], xmm3
	LONG $0x7f0f4166; BYTE $0x0a               // movdqa    oword [r10], xmm1
	LONG $0x7f0f4166; WORD $0x1042             // movdqa    oword [r10 + 16], xmm0
	LONG $0x14488b45                           // mov    r9d, dword [r8 + 20]
	WORD $0x8944; BYTE $0xc8                   // mov    eax, r9d
	WORD $0xd8f7                               // neg    eax
	LONG $0x10408941                           // mov    dword [r8 + 16], eax
	LONG $0x18508b45                           // mov    r10d, dword [r8 + 24]
	WORD $0x8944; BYTE $0xd0                   // mov    eax, r10d
	WORD $0xd8f7                               // neg    eax
	LONG $0x14408941                           // mov    dword [r8 + 20], eax
	WORD $0x078b                               // mov    eax, dword [rdi]
	LONG $0x1c402b41                           // sub    eax, dword [r8 + 28]
	LONG $0x18408941                           // mov    dword [r8 + 24], eax
	WORD $0x178b                               // mov    edx, dword [rdi]
	LONG $0x1c508941                           // mov    dword [r8 + 28], edx
	WORD $0x2944; BYTE $0xd0                   // sub    eax, r10d
	LONG $0x14408941                           // mov    dword [r8 + 20], eax
	WORD $0x2944; BYTE $0xc8                   // sub    eax, r9d
	LONG $0x10408941                           // mov    dword [r8 + 16], eax
	WORD $0xd341; BYTE $0xfb                   // sar    r11d, cl
	WORD $0x078b                               // mov    eax, dword [rdi]
	WORD $0x2944; BYTE $0xd8                   // sub    eax, r11d
	WORD $0x0789                               // mov    dword [rdi], eax
	WORD $0x0689                               // mov    dword [rsi], eax
	SUBQ $8, SP
	RET

DATA LCDATA3<>+0x000(SB)/8, $0x0000000200000001
DATA LCDATA3<>+0x008(SB)/8, $0x0000000400000002
DATA LCDATA3<>+0x010(SB)/8, $0xfffffffeffffffff
DATA LCDATA3<>+0x018(SB)/8, $0xfffffffcfffffffe
GLOBL LCDATA3<>(SB), 8, $32

TEXT ·__hybrid_filter_dec_sse2(SB), $16-56

	MOVQ in+0(FP), DI
	MOVQ err+8(FP), SI
	MOVQ qm+16(FP), DX
	MOVQ dx+24(FP), CX
	MOVQ dl+32(FP), R8
	MOVQ round+40(FP), R9
	MOVQ shift+48(FP), R10
	ADDQ $8, SP
	MOVQ R10, 0(SP)
	LEAQ LCDATA3<>(SB), BP

	LONG $0x24148b44               // mov    r10d, dword 0[rsp] /* [rbp + 16] */
	LONG $0x6f0f4166; BYTE $0x10   // movdqa    xmm2, oword [r8]
	LONG $0x6f0f4166; WORD $0x1040 // movdqa    xmm0, oword [r8 + 16]
	LONG $0x2a6f0f66               // movdqa    xmm5, oword [rdx]
	LONG $0x626f0f66; BYTE $0x10   // movdqa    xmm4, oword [rdx + 16]
	LONG $0x196f0f66               // movdqa    xmm3, oword [rcx]
	LONG $0x496f0f66; BYTE $0x10   // movdqa    xmm1, oword [rcx + 16]
	WORD $0x068b                   // mov    eax, dword [rsi]
	WORD $0xc085                   // test    eax, eax
	JS   LBB2_1
	JE   LBB2_5
	LONG $0xebfe0f66               // paddd    xmm5, xmm3
	LONG $0xe1fe0f66               // paddd    xmm4, xmm1
	JMP  LBB2_4

LBB2_1:
	LONG $0xebfa0f66 // psubd    xmm5, xmm3
	LONG $0xe1fa0f66 // psubd    xmm4, xmm1

LBB2_4:
	LONG $0x2a7f0f66             // movdqa    oword [rdx], xmm5
	LONG $0x627f0f66; BYTE $0x10 // movdqa    oword [rdx + 16], xmm4

LBB2_5:
	LONG $0xf26f0f66               // movdqa    xmm6, xmm2
	LONG $0xf5f40f66               // pmuludq    xmm6, xmm5
	LONG $0xfa700f66; BYTE $0xb1   // pshufd    xmm7, xmm2, 177
	LONG $0xed700f66; BYTE $0xb1   // pshufd    xmm5, xmm5, 177
	LONG $0xeff40f66               // pmuludq    xmm5, xmm7
	LONG $0xed700f66; BYTE $0xa0   // pshufd    xmm5, xmm5, 160
	LONG $0x0e3a0f66; WORD $0x33ee // pblendw    xmm5, xmm6, 51
	LONG $0xf06f0f66               // movdqa    xmm6, xmm0
	LONG $0xf4f40f66               // pmuludq    xmm6, xmm4
	LONG $0xf8700f66; BYTE $0xb1   // pshufd    xmm7, xmm0, 177
	LONG $0xe4700f66; BYTE $0xb1   // pshufd    xmm4, xmm4, 177
	LONG $0xe7f40f66               // pmuludq    xmm4, xmm7
	LONG $0xe4700f66; BYTE $0xa0   // pshufd    xmm4, xmm4, 160
	LONG $0x0e3a0f66; WORD $0x33e6 // pblendw    xmm4, xmm6, 51
	LONG $0xe5fe0f66               // paddd    xmm4, xmm5
	LONG $0xec700f66; BYTE $0xee   // pshufd    xmm5, xmm4, 238
	LONG $0xecfe0f66               // paddd    xmm5, xmm4
	LONG $0xe87e0f66               // movd    eax, xmm5
	LONG $0x163a0f66; WORD $0x01ea // pextrd    edx, xmm5, 1
	WORD $0x0144; BYTE $0xca       // add    edx, r9d
	WORD $0xc201                   // add    edx, eax
	LONG $0x0f3a0f66; WORD $0x04cb // palignr    xmm1, xmm3, 4
	LONG $0xd86f0f66               // movdqa    xmm3, xmm0
	LONG $0x0f3a0f66; WORD $0x04da // palignr    xmm3, xmm2, 4
	LONG $0xe0720f66; BYTE $0x1e   // psrad    xmm0, 30
	LONG $0x45eb0f66; BYTE $0x00   // por    xmm0, oword 0[rbp] /* [rip + LCPI2_0] */
	LONG $0x45db0f66; BYTE $0x10   // pand    xmm0, oword 16[rbp] /* [rip + LCPI2_1] */
	LONG $0x7f0f4166; BYTE $0x18   // movdqa    oword [r8], xmm3
	LONG $0x097f0f66               // movdqa    oword [rcx], xmm1
	LONG $0x417f0f66; BYTE $0x10   // movdqa    oword [rcx + 16], xmm0
	WORD $0x078b                   // mov    eax, dword [rdi]
	WORD $0x0689                   // mov    dword [rsi], eax
	WORD $0x8944; BYTE $0xd1       // mov    ecx, r10d
	WORD $0xfad3                   // sar    edx, cl
	WORD $0x1701                   // add    dword [rdi], edx
	LONG $0x14408b41               // mov    eax, dword [r8 + 20]
	WORD $0xc189                   // mov    ecx, eax
	WORD $0xd9f7                   // neg    ecx
	LONG $0x10488941               // mov    dword [r8 + 16], ecx
	LONG $0x18488b41               // mov    ecx, dword [r8 + 24]
	WORD $0xca89                   // mov    edx, ecx
	WORD $0xdaf7                   // neg    edx
	LONG $0x14508941               // mov    dword [r8 + 20], edx
	WORD $0x178b                   // mov    edx, dword [rdi]
	LONG $0x1c502b41               // sub    edx, dword [r8 + 28]
	LONG $0x18508941               // mov    dword [r8 + 24], edx
	WORD $0x378b                   // mov    esi, dword [rdi]
	LONG $0x1c708941               // mov    dword [r8 + 28], esi
	WORD $0xca29                   // sub    edx, ecx
	LONG $0x14508941               // mov    dword [r8 + 20], edx
	WORD $0xc229                   // sub    edx, eax
	LONG $0x10508941               // mov    dword [r8 + 16], edx
	SUBQ $8, SP
	RET

DATA LCDATA4<>+0x000(SB)/8, $0x0000000200000001
DATA LCDATA4<>+0x008(SB)/8, $0x0000000400000002
DATA LCDATA4<>+0x010(SB)/8, $0xfffffffeffffffff
DATA LCDATA4<>+0x018(SB)/8, $0xfffffffcfffffffe
GLOBL LCDATA4<>(SB), 8, $32

TEXT ·__hybrid_filter_enc_sse2(SB), $16-56

	MOVQ in+0(FP), DI
	MOVQ err+8(FP), SI
	MOVQ qm+16(FP), DX
	MOVQ dx+24(FP), CX
	MOVQ dl+32(FP), R8
	MOVQ round+40(FP), R9
	MOVQ shift+48(FP), R10
	ADDQ $8, SP
	MOVQ R10, 0(SP)
	LEAQ LCDATA4<>(SB), BP

	WORD $0x8949; BYTE $0xca       // mov    r10, rcx
	WORD $0x0c8b; BYTE $0x24       // mov    ecx, dword 0[rsp] /* [rbp + 16] */
	LONG $0x6f0f4166; BYTE $0x10   // movdqa    xmm2, oword [r8]
	LONG $0x6f0f4166; WORD $0x1040 // movdqa    xmm0, oword [r8 + 16]
	LONG $0x2a6f0f66               // movdqa    xmm5, oword [rdx]
	LONG $0x626f0f66; BYTE $0x10   // movdqa    xmm4, oword [rdx + 16]
	LONG $0x6f0f4166; BYTE $0x1a   // movdqa    xmm3, oword [r10]
	LONG $0x6f0f4166; WORD $0x104a // movdqa    xmm1, oword [r10 + 16]
	WORD $0x068b                   // mov    eax, dword [rsi]
	WORD $0xc085                   // test    eax, eax
	JS   LBB3_1
	JE   LBB3_5
	LONG $0xebfe0f66               // paddd    xmm5, xmm3
	LONG $0xe1fe0f66               // paddd    xmm4, xmm1
	JMP  LBB3_4

LBB3_1:
	LONG $0xebfa0f66 // psubd    xmm5, xmm3
	LONG $0xe1fa0f66 // psubd    xmm4, xmm1

LBB3_4:
	LONG $0x2a7f0f66             // movdqa    oword [rdx], xmm5
	LONG $0x627f0f66; BYTE $0x10 // movdqa    oword [rdx + 16], xmm4

LBB3_5:
	LONG $0xf26f0f66                           // movdqa    xmm6, xmm2
	LONG $0xf5f40f66                           // pmuludq    xmm6, xmm5
	LONG $0xfa700f66; BYTE $0xb1               // pshufd    xmm7, xmm2, 177
	LONG $0xed700f66; BYTE $0xb1               // pshufd    xmm5, xmm5, 177
	LONG $0xeff40f66                           // pmuludq    xmm5, xmm7
	LONG $0xed700f66; BYTE $0xa0               // pshufd    xmm5, xmm5, 160
	LONG $0x0e3a0f66; WORD $0x33ee             // pblendw    xmm5, xmm6, 51
	LONG $0xf06f0f66                           // movdqa    xmm6, xmm0
	LONG $0xf4f40f66                           // pmuludq    xmm6, xmm4
	LONG $0xf8700f66; BYTE $0xb1               // pshufd    xmm7, xmm0, 177
	LONG $0xe4700f66; BYTE $0xb1               // pshufd    xmm4, xmm4, 177
	LONG $0xe7f40f66                           // pmuludq    xmm4, xmm7
	LONG $0xe4700f66; BYTE $0xa0               // pshufd    xmm4, xmm4, 160
	LONG $0x0e3a0f66; WORD $0x33e6             // pblendw    xmm4, xmm6, 51
	LONG $0xe5fe0f66                           // paddd    xmm4, xmm5
	LONG $0xec700f66; BYTE $0xee               // pshufd    xmm5, xmm4, 238
	LONG $0xecfe0f66                           // paddd    xmm5, xmm4
	LONG $0xe87e0f66                           // movd    eax, xmm5
	LONG $0x3a0f4166; WORD $0xeb16; BYTE $0x01 // pextrd    r11d, xmm5, 1
	WORD $0x0145; BYTE $0xcb                   // add    r11d, r9d
	WORD $0x0141; BYTE $0xc3                   // add    r11d, eax
	LONG $0x0f3a0f66; WORD $0x04cb             // palignr    xmm1, xmm3, 4
	LONG $0xd86f0f66                           // movdqa    xmm3, xmm0
	LONG $0x0f3a0f66; WORD $0x04da             // palignr    xmm3, xmm2, 4
	LONG $0xe0720f66; BYTE $0x1e               // psrad    xmm0, 30
	LONG $0x45eb0f66; BYTE $0x00               // por    xmm0, oword 0[rbp] /* [rip + LCPI3_0] */
	LONG $0x45db0f66; BYTE $0x10               // pand    xmm0, oword 16[rbp] /* [rip + LCPI3_1] */
	LONG $0x7f0f4166; BYTE $0x18               // movdqa    oword [r8], xmm3
	LONG $0x7f0f4166; BYTE $0x0a               // movdqa    oword [r10], xmm1
	LONG $0x7f0f4166; WORD $0x1042             // movdqa    oword [r10 + 16], xmm0
	LONG $0x14488b45                           // mov    r9d, dword [r8 + 20]
	WORD $0x8944; BYTE $0xc8                   // mov    eax, r9d
	WORD $0xd8f7                               // neg    eax
	LONG $0x10408941                           // mov    dword [r8 + 16], eax
	LONG $0x18508b45                           // mov    r10d, dword [r8 + 24]
	WORD $0x8944; BYTE $0xd0                   // mov    eax, r10d
	WORD $0xd8f7                               // neg    eax
	LONG $0x14408941                           // mov    dword [r8 + 20], eax
	WORD $0x078b                               // mov    eax, dword [rdi]
	LONG $0x1c402b41                           // sub    eax, dword [r8 + 28]
	LONG $0x18408941                           // mov    dword [r8 + 24], eax
	WORD $0x178b                               // mov    edx, dword [rdi]
	LONG $0x1c508941                           // mov    dword [r8 + 28], edx
	WORD $0x2944; BYTE $0xd0                   // sub    eax, r10d
	LONG $0x14408941                           // mov    dword [r8 + 20], eax
	WORD $0x2944; BYTE $0xc8                   // sub    eax, r9d
	LONG $0x10408941                           // mov    dword [r8 + 16], eax
	WORD $0xd341; BYTE $0xfb                   // sar    r11d, cl
	WORD $0x078b                               // mov    eax, dword [rdi]
	WORD $0x2944; BYTE $0xd8                   // sub    eax, r11d
	WORD $0x0789                               // mov    dword [rdi], eax
	WORD $0x0689                               // mov    dword [rsi], eax
	SUBQ $8, SP
	RET
